<?xml version="1.0" ?>
<argos-configuration>

  <!-- ************************* -->
  <!-- * General configuration * -->
  <!-- ************************* -->
  <framework>
    <system threads="0" />
    <experiment length="150" ticks_per_second="10" random_seed="12345" />
  </framework>
  
  <!-- *************** -->
  <!-- * Controllers * -->
  <!-- *************** -->
  <controllers>
    <virtual_forces_bot_controller id="virtual_forces" library="build/src/controllers/virtual_forces/libvirtual_forces.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
      </params>
    </virtual_forces_bot_controller>
    <virtual_forces_random_controller id="virtual_forces_random" library="build/src/controllers/virtual_forces/libvirtual_forces.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
      </params>
    </virtual_forces_random_controller>
    <virtual_forces_adverserial_controller id="virtual_forces_walk_away" library="build/src/controllers/virtual_forces/libvirtual_forces.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
      </params>
    </virtual_forces_adverserial_controller>
    <keep_distance_controller id="keep_distance" library="build/src/controllers/virtual_forces/libvirtual_forces.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="20" />
      </params>
    </keep_distance_controller>
    <crash_controller id="crash" library="build/src/controllers/abstract_controllers/libabstract_controllers.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
      </params>
    </crash_controller>
    <virtual_forces_random_crash_controller id="virtual_forces_random_crash" library="build/src/controllers/abstract_controllers/libabstract_controllers.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
          <crash start_time="50" end_time="100"/>
      </params>
    </virtual_forces_random_crash_controller>
    <robust_matching_controller id="algo_matching" library="build/src/controllers/robust_matching/librobust_matching.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
      </params>
    </robust_matching_controller>
    <robust_matching_crash_controller id="algo_matching_crash" library="build/src/controllers/robust_matching/librobust_matching.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
          <crash start_time="50" end_time="100"/>
      </params>
    </robust_matching_crash_controller>
    <adverserial_opposite_direction_controller id="algo_matching_walk_away" library="build/src/controllers/robust_matching/librobust_matching.so">
      <actuators>
        <differential_steering implementation="default" />
        <epuck2_leds implementation="default" medium="leds" />
        <range_and_bearing implementation="default" />
      </actuators>
      <sensors>
      	<epuck2_encoder implementation="default" />
        <epuck2_battery implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
      </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
      </params>
    </adverserial_opposite_direction_controller>
    <meeting_point_epuck_controller id="meeting_point_epuck" library="build/src/controllers/meeting_points/libmeeting_points.so">
      <actuators>
          <differential_steering implementation="default" />
          <epuck2_leds implementation="default" medium="leds" />
          <range_and_bearing implementation="default" />
        </actuators>
        <sensors>
            <epuck2_encoder implementation="default" />
          <epuck2_battery implementation="default"/>
          <range_and_bearing implementation="medium" medium="rab" show_rays="false" />
        </sensors>
    <params>
      <wheel_turning hard_turn_angle_threshold="90"
                     soft_turn_angle_threshold="70"
                     no_turn_angle_threshold="10"
                     max_speed="1" />
    </params>
    </meeting_point_epuck_controller>
    <greedy_meeting_point_controller id="greedy_meeting_points" library="build/src/controllers/meeting_points/libmeeting_points.so">
        <actuators>
            <differential_steering implementation="default" />
            <epuck2_leds implementation="default" medium="leds" />
            <range_and_bearing implementation="default" />
          </actuators>
          <sensors>
              <epuck2_encoder implementation="default" />
            <epuck2_battery implementation="default"/>
            <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
          </sensors>
      <params>
        <wheel_turning hard_turn_angle_threshold="90"
                       soft_turn_angle_threshold="70"
                       no_turn_angle_threshold="10"
                       max_speed="1" />
      </params>
    </greedy_meeting_point_controller>
    <greedy_meeting_point_controller id="greedy_meeting_points_crash" library="build/src/controllers/abstract_controllers/libabstract_controllers.so">
        <actuators>
          <differential_steering implementation="default" />
          <epuck2_leds implementation="default" medium="leds" />
          <range_and_bearing implementation="default" />
        </actuators>
        <sensors>
            <epuck2_encoder implementation="default" />
          <epuck2_battery implementation="default"/>
          <range_and_bearing implementation="medium" medium="rab" show_rays="true" />
        </sensors>
        <params >
          <crash m_crash_starttime="0" 
                m_crash_endtime="1"/>
          <wheel_turning hard_turn_angle_threshold="90"
                         soft_turn_angle_threshold="70"
                         no_turn_angle_threshold="10"
                         max_speed="1" />
        </params>
      </greedy_meeting_point_controller>
  </controllers>

  <loop_functions library="/home/lior/workspace/robust-matching/build/src/loop_functions/print_experiment_loop_fuctions/libprint_experiment_loop_fuctions"
                  label="print_experiment_loop_fuctions">
        <params
          log_file_path="tmp"
        />
        <distribute_max_range range="0.5" arena_size="2.0">
          <robot quantity="10">
              <e-puck2 id="non_faulty" rab_range="0.5" rab_data_size="3">
                  <controller config="virtual_forces"></controller>
              </e-puck2>
          </robot>
          <robot quantity="10">
              <e-puck2 id="faulty" rab_range="0.5" rab_data_size="3">
                  <controller config="virtual_forces_walk_away"></controller>
              </e-puck2>
          </robot>
      </distribute_max_range>
  </loop_functions>

  <!-- *********************** -->
  <!-- * Arena configuration * -->
  <!-- *********************** -->
    <arena size="16.0,16.0,1.0" center="0.0,0.0,0.5">
		 <!-- <distribute>
		   <position method="uniform" min="-0.75,-0.75,0" max="0.75,0.75,0" />
		   <orientation method="gaussian" mean="0,0,0" std_dev="360,0,0" />
		   <entity quantity="8" max_trials="100">
		     <e-puck2 id="non_faulty" rab_range="5" rab_data_size="3">
		       <controller config="virtual_forces" />
		     </e-puck2>
		   </entity>
		 </distribute>
        <distribute>
		   <position method="uniform" min="-0.75,-0.75,0" max="0.75,0.75,0" />
		   <orientation method="gaussian" mean="0,0,0" std_dev="360,0,0" />
		   <entity quantity="8" max_trials="100">
          <e-puck2 id="faulty" rab_range="5" rab_data_size="3">
              <controller config="virtual_forces_walk_away" />
          </e-puck2>
		   </entity>
		 </distribute> -->

    <box id="wall_north" size="6,0.1,0.2" movable="false">
      <body position="0,3,0" orientation="0,0,0" />
    </box>
    <box id="wall_south" size="6,0.1,0.2" movable="false">
      <body position="0,-3,0" orientation="0,0,0" />
    </box>
    <box id="wall_east" size="0.1,6,0.2" movable="false">
      <body position="3,0,0" orientation="0,0,0" />
    </box>
    <box id="wall_west" size="0.1,6,0.2" movable="false">
      <body position="-3,0,0" orientation="0,0,0" />
    </box>
    </arena>


  <!-- ******************* -->
  <!-- * Physics engines * -->
  <!-- ******************* -->
  <physics_engines>
    <dynamics2d id="dyn2d" />
    <pointmass3d id="pm3d" iterations="10" />
  </physics_engines>

  <!-- ********* -->
  <!-- * Media * -->
  <!-- ********* -->
  <media>
    <led id="leds" />
    <range_and_bearing id="rab" />
  </media>

  <!-- ****************** -->
  <!-- * Visualization * -->
  <!-- ****************** -->
  <visualization>
      <qt-opengl>
        <user_functions library="/home/lior/workspace/robust-matching/build/src/loop_functions/basic_loop_functions/libbasic_loop_functions"
              label="basic_qt_user_functions" />

      <!-- <user_functions library="/home/lior/workspace/robust-matching/build/src/loop_functions/matching_loop_functions/libmatching_loop_functions"
                  label="matching_qt_user_functions" /> -->
      <camera>
        <placements>
            <placement index="0" position="0.0,0,1.51472" look_at="0.0,0,0" up="-0.00924894,0.924863,0.380188" lens_focal_length="20"/>
        </placements>
      </camera>
    </qt-opengl>
  </visualization>
  
</argos-configuration>
